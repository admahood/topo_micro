stop("Raster has differing x and y cell resolutions. Check that it is in a projected coordinate system (e.g. UTM) and use raster::projectRaster to reproject to one if not. Otherwise consider using raster::resample")
}
create_layers(dem, fill.sinks = F)
atb <- terra::set.values(dem, terra::cells(dem), topidx$atb)
terra::cells(dem)
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
topidx
dim(topidx)
length(topidx)
terra::as.matrix(dem)
topidx
topmodel::topidx
terra::as.matrix(dem)
load_all()
rm(list = c("create_layers", "upslope"))
load_all()
create_layers(dem)
library(raster)
create_layers(dem)
upslope(dem)
load_all()
create_layers(dem)
layers <- raster::stack(dem)
layers
a.atb <- upslope(dem, atb = TRUE, fill.sinks = fill.sinks, deg = deg)
fill.sinks=TRUE
a.atb <- upslope(dem, atb = TRUE, fill.sinks = fill.sinks, deg = deg)
upslope(dem)
dem
dem %>% as.raster()
dem <- elevatr::get_elev_raster(locations = data.frame(x = -105, y = 40),prj = 4326, z=14)
create_layers(dem)
create_layers(dem) -> x
plot(x)
create_layers(dem, fill.sinks = F) -> x
plot(x)
hist(getValues(x$twi))
hist(getValues(x$twi), breaks=30)
upslope.area <-
function(dem, log=T, atb=F, deg=0.1)
{
if(xres(dem)!=yres(dem)) {stop("x and y resolutions differ")}
# any sinks still present may give strange results
#  sink(file="e:/junk/sink.txt")
#  on.exit(sink(NULL))
capture.output(dem <- invisible(raster::setValues(dem, topmodel::sinkfill(as.matrix(dem), res=xres(dem), degree=deg))))
topidx <- topmodel::topidx(as.matrix(dem), res=xres(dem))
a <- raster::setValues(dem, topidx$area)
if(log)
{
a <- log(a)
}
if(atb)
{
atb <- raster::setValues(dem, topidx$atb)
# add the topographic index ln(a/tanB)
a <- addLayer(a, atb)
names(a)<-c("a", "atb")
}
return(a)
}
upslope.area(dem) %>% plot()
upslope.area(dem)
xres(dem)
yres(dem)
yres(dem)
upslope.area <-
function(dem, log=T, atb=F, deg=0.1)
{
capture.output(dem <- invisible(raster::setValues(dem, topmodel::sinkfill(as.matrix(dem), res=xres(dem), degree=deg))))
topidx <- topmodel::topidx(as.matrix(dem), res=xres(dem))
a <- raster::setValues(dem, topidx$area)
if(log)
{
a <- log(a)
}
if(atb)
{
atb <- raster::setValues(dem, topidx$atb)
# add the topographic index ln(a/tanB)
a <- addLayer(a, atb)
names(a)<-c("a", "atb")
}
return(a)
}
upslope.area(dem)
upslope.area(dem) -> plot()
upslope.area(dem) -> x
plot(x)
?topidx
topmodel::topidx(dem)
topmodel::topidx(dem %>% as.matrix())
topmodel::topidx(dem %>% as.matrix(), terra::res(dem))
topidx
topmodel::topidx
topmodel::topidx(dem %>% as.matrix(), terra::res(dem)) -> xx
xx$atb
xx$atb %>% terra::rast()
xx$atb %>% terra::rast() %>% plot()
xx$area %>% terra::rast() %>% plot()
xx$area %>% terra::rast() %>% log() %>% plot()
xx$area %>% terra::rast() %>% log() %>% hist()
xx$area %>% terra::rast() %>% hist()
dem <- elevatr::get_elev_raster(locations = data.frame(y=
40.63229590683869,x= -105.56689195350452), z = 14, prj=4326)
plot(dem)
dem <- elevatr::get_elev_raster(locations = data.frame(y=
40.63229590683869,x= -105.56689195350452), z = 11, prj=4326)
plot(dem)
terra::as.matrix(dem)
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
ti <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
plot(ti$atb)
plot(terra::rast(ti$atb))
ti$atb
a <- raster::setValues(dem, topidx$area)
a
plot(a)
a <- log(a)
plot(a)
atb <- raster::setValues(dem, topidx$atb)
plot(atb)
dim(ti$atb)
dim(ti$area)
plot(a)
plot(dem)
plot(a)
plot(a %>% exp())
freq(a)
topidx
topmodel::topidx
terra::terrain(dem)
terra::terrain(dem) %>% plot()
terra::terrain(dem, v = "TPI") %>% plot()
terra::terrain(dem, v = "TRI") %>% plot()
?terrain
terra::terrain(dem, v = "flowdir") %>% plot()
ter <- terra::terrain(dem, v = c("slope", "aspect", "flowdir", "TPI"))
ter
dem
ter <- terra::terrain(dem %>% rast(), v = c("slope", "aspect", "flowdir", "TPI"))
ter
plot(ter)
ter <- terra::terrain(dem %>% rast(), v = c("slope", "aspect", "roughness", "TRI"))
plot(ter)
library(devtools)
load_all()
install()
load_all()
install()
?sinkfill
?topidx
topidx
topmodel::topidx
library(devtools)
load_all()
twi_jam <- terra::rast("/Users/Adam.Mahood/Desktop/church_twi_10m.tif")
dem_jam <- terra::rast("/Users/Adam.Mahood/Desktop/USGS 10m DEM cropped v01.tif")
r <- raster::raster("/Users/Adam.Mahood/Desktop/USGS 10m DEM cropped v01.tif")
create_layers(r)
library(raster)
create_layers(r)
create_layers(r)->twi_new
twi_new$twi |> plot()
twi_jam |> plot()
twi_jam |> as("Raster") |> plot()
twi_new$twi |> plot()
sum(is.na(getValues(twi_jam)))
sum(is.na((twi_jam)))
sum(is.na(terra::values(twi_jam)))
sum(is.na(terra::values(twi_new$twi)))
dem <- dem_jam
capture.output(dem <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
deg <- 0.1
capture.output(dem <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
capture.output(dem <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
dem <- dem_jam
capture.output(dem1 <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
ti <- topmodel::topidx(terra::as.matrix(dem1), res = terra::xres(dem1))
a <- terra::setValues(dem, topidx$area)
a <- terra::setValues(dem, ti$area)
a <- log(a)
atb <- terra::setValues(dem, ti$atb)
a <- terra::addLayer(a, atb)
atb <- terra::setValues(dem, ti$atb)
plot(atb)
terra::xres(dem)
fill.sinks=T
if (fill.sinks) {
capture.output(dem1 <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
}else{dem1 <- dem}
ti <- topmodel::topidx(terra::as.matrix(dem1), res = terra::xres(dem1))
a <- terra::setValues(dem1, ti$area) |>
log()
atb <- terra::setValues(dem1, ti$atb)
plot(atb)
plot(twi_new$twi)
upslope(dem) |> plot()
upslope(as(dem, "Raster")) |> plot()
class(dem)
class(dem) |> as.character()
load_all()
upslope(dem) |> plot()
create_layers(dem) |> plot()
topmodel::topidx
library(devtools)
document()
check()
load_all()
document()
check()
install()
document();install()
?topidx
document();install()
library(devtools)
document()
install()
library(terra)
terra::rast("/Users/Adam.Mahood/Desktop/church_twi_10m.tif") -> dem_meters
install()
devtools::document();devtools::install()
save(dem_meters, file = "data/dem_meters.tif")
save(dem_meters, file = "data/dem_meters.tif", compress = "bz")
save(dem_meters, file = "data/dem_meters.tif", compress = "gz")
save(dem_meters, file = "data/dem_meters.tif", compress = T)
library(devtools)
data("dem_meters")
terra::rast(dem_meters)
terra::rast("data/dem_meters.tif")
terra::rast("/Users/Adam.Mahood/Desktop/USGS 10m DEM cropped v01.tif") -> dem_meters
save(dem_meters, file = "dem_meters.rda")
save(dem_meters, file = "data/dem_meters.rda", compress=T)
terra::rast("data/srtm.hgt") -> dem_deg
terra::rast("data/N40W106.SRTMGL1.hgt/N40W106.hgt") -> dem_deg
load_all()
create_layers(dem_meters) -> xx
load_all()
create_layers(dem_meters) -> xx
upslope(dem_meters)
load_all()
create_layers(dem_meters) -> xx
xx$twi %>% plot()
plot(xx$twi)
library(raster)
plot(xx$twi)
create_layers(dem_deg, resolution = 30) -> xx
plot(xx$twi)
?terra::crop
plot(dem_meters)
plot(dem_deg)
?terra::crop
dem_deg
terra::ext(dem_deg)
terra::ext(dem_deg) -> e
e
e[1]
e[1] <- -105.8
e
e[2] <- -105.1
e[3] <- 40.4
e[4] <- 40.8
dem_deg1 <- crop(dem_deg, e)
plot(dem_deg1)
e[1] <- -105.9
dem_deg1 <- crop(dem_deg, e)
plot(dem_deg1)
dem_deg <- dem_deg1
save(dem_deg, "data/dem_deg.rda")
save(dem_deg, file = "data/dem_deg.rda")
create_layers(dem_deg, resolution = 30) -> xx
plot(xx$twi)
plot(dem_deg)
load_all()
create_layers(dem_deg, resolution = 30) -> xx
plot(xx$twi)
load_all()
create_layers(dem_deg, resolution = 30) -> xx
plot(xx$twi)
?topidx
plot(xx$upslope.area)
topidx
topmodel::topidx
dem <- dem_meters
dem
demr <- as(dem, "Raster")
demr
class(demr)
class(demr)|>as.character()
terra::rast(demr)
resolution <- raster::xres(demr)
resolution
capture.output(dem1 <- invisible(
raster::setValues(demr,
topmodel::sinkfill(raster::as.matrix(demr),
res = resolution,
degree = deg))))
deg = 0.12
dem1 <- invisible(
raster::setValues(demr,
topmodel::sinkfill(raster::as.matrix(demr),
res = resolution,
degree = deg)))
raster::as.matrix(demr)
terra::as.matrix(dem_deg)
terra::as.matrix(dem_deg) |> dim()
raster::as.matrix(demr) |> dim()
raster::as.matrix(demr)[[1]] |> dim()
raster::as.matrix(demr)[1] |> dim()
raster::as.matrix(demr) |> dim()
terra::as.matrix(dem_deg)[1] |> dim()
terra::as.matrix(dem_deg)[[1]] |> dim()
terra::as.matrix(dem_deg) |> dim()
topmodel::sinkfill(dem_deg)
topmodel::sinkfill(dem)
dem
as.matrix(dem)
as.matrix(dem) %>% dim()
?terra::as.matrix
as.array(dem) %>% dim()
as.array(dem) %>% as.matrix() %>% dim()
topmodel::sinkfill(dem %>% as.array())
topmodel::sinkfill(dem %>% as.matrix(wide=T))
as.matrix(dem, wide=T) %>% dim()
load_all()
terra_twi(dem) -> xxx
load_all()
terra_twi(dem) -> xxx
terra::rast(dem, demr)
terra::rast(dem, dem)
terra::c(dem, dem)
c(dem, dem)
terra::setValues
load_all()
terra_twi(dem)->xxx
plot(xxx)
load_all()
plot(xxx)
terra_twi(dem)->xxx
plot(xxx$twi)
plot(xxx$upslope_area)
?sinkfill
load_all()
document()
check()
load_all()
check()
load_all()
check()
install()
topidx
topmodel::topidx
install()
check()
save(dem_deg, file = "data/dem_deg.rda", compress = "xz")
save(dem_meters, file = "data/dem_meters.rda", compress = "xz")
terra::as()
?as()
methods::as(dem_deg, "Raster")
dem_deg
?capture.output
load_all()
load_all()
document()
check()
load_all()
document()
load_all()
document()
#' Read in and wrangle data from Blue Maestro sensors
#'
#' @param filename path to the csv file obtained from the blue maestro app.
#' @export
bm_prep <- function(filename){
requireNamespace("readr")
requireNamespace("tibble")
requireNamespace("dplyr")
requireNamespace("lubridate")
top <- readr::read_csv(filename,n_max = 1)
bottom <- read.csv(filename) %>%
dplyr::slice(3:nrow(.)) |>
dplyr::select(index =1, date=2, temperature =3, humidity=4, dewpoint=5 ) |>
tibble::as_tibble() |>
dplyr::mutate_at(3:5, as.numeric) |>
tidyr::separate(date, sep = " ",
into = c("weekday", "month", "mday", "year", "hms", "tz", "tzv"),
extra = "merge") |>
dplyr::mutate(dt = lubridate::ymd_hms(paste(year, month, mday, hms, sep="-")),
ymd = lubridate::as_date(dt)) |>
dplyr::rename(temperature_c = temperature,
humidity_pct = humidity,
dewpoint_c = dewpoint) |>
dplyr::mutate(id = top$Name,
dl_date = top$Download_Date)
lubridate::tz(bottom$dt) <- "US/Mountain"
return(bottom)
}
#' of the raster is in degrees
#'
#' @examples
#' data('dem_meters')
#' x <- get_twi(dem_meters)
#'
#' data('dem_deg')
#' xx <- get_twi(dem_deg, resolution = 30)
#'
#' @export
get_twi <- function(dem, deg = 0.12, fill.sinks=T, resolution=NA){
requireNamespace("terra")
requireNamespace("topmodel")
if(class(dem)|>as.character() == "RasterLayer") dem <- terra::rast(dem)
if(is.na(resolution)) resolution <- terra::xres(dem)
if (fill.sinks) {
capture.output(dem1 <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem, wide = T),
res = resolution,
degree = deg))))
}else{dem1 <- dem}
ti <- topmodel::topidx(terra::as.matrix(dem1, wide=T), res = resolution)
a <- terra::setValues(dem1, ti$area)
a <- log(a + 1)
atb <- terra::setValues(dem1, ti$atb)
a <- c(dem1, a, atb)
names(a) <- c("elevation","upslope_area", "twi")
return(a)
}
#' Saturation pressure
#'
#' Thanks https://physics.stackexchange.com/questions/4343/how-can-i-calculate-vapor-pressure-deficit-from-temperature-and-relative-humidit
#'
#' @param temp_c temperature
#' @export
get_es <- function(temp_c){
es <- 6.11 * exp((2.5e6 / 461) * (1 / 273.15 - 1 / (273.15 + temp_c)))
return(es)
}
#' Vapor pressure deficit
#'
#' Thanks https://physics.stackexchange.com/questions/4343/how-can-i-calculate-vapor-pressure-deficit-from-temperature-and-relative-humidit
#'
#' @param temp_c temperature
#' @param rh relative humidity
#' @export
get_vpd <- function(rh, temp_c){
## calculate saturation vapor pressure
es <- get_es(temp_c)
## calculate vapor pressure deficit
vpd <- ((100 - rh) / 100) * es
return(vpd)
}
load_all()
document()
load_all()
document()
load_all()
document()
check()
document()
data(dem_deg)
save(dem_deg, "data/dem_deg.rda", compress = "bzip")
save(dem_deg, file= "data/dem_deg.rda", compress = "bzip")
save(dem_deg, file= "data/dem_deg.rda", compress = T)
load_all()
document()
save(dem_deg |> as("Raster"), file= "data/dem_deg.rda", compress = T)
library(raster)
save(dem_deg |> as("Raster"), file= "data/dem_deg.rda", compress = T)
save(as(dem_deg,"Raster"), file= "data/dem_deg.rda", compress = T)
save(as(dem_deg,"RasterLayer"), file= "data/dem_deg.rda", compress = T)
dem_deg
load_all()
document()
document()
check()
load_all()
document()
check()
install()
library(devtools)
load_all()
document()
check()
install()
load_all()
document()
install()
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
check()
install()
document()
update.packages(ask=F)
