check()
library(devtools)
load_all()
check()
document
document()
use_mit_license()
library(terra)
load_all()
document()
document()
document()
install()
use_testthat()
use_test()
test_that({folded_aspect(360) == 0})
use_test("folded_aspect")
test_that("360 becomes 0", {
expect_equal(folded_aspect(360) == 0)
})
use_test("folded_aspect")
test()
test()
document()
document()
install()
dem
dem <- elevatr::get_elev_raster(locations = data.frame(x = -105, y = 40))
dem <- elevatr::get_elev_raster(locations = data.frame(x = -105, y = 40),prj = 4326)
dem <- elevatr::get_elev_raster(locations = data.frame(x = -105, y = 40),prj = 4326, z=14)
dem
dem = rast(dem)
dem = terra::rast(dem)
library(devtools)
library(topmodel)
dem
all.equal(xres(dem), yres(dem))
xres
library(terra)
xres(dem)
all.equal(xres(dem), yres(dem))
terra::set.values()
capture.output(dem <- invisible(terra::set.values(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
deg = 0.12
terra::set.values(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg)
)
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg)
terra::set.values(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))
?raster::setValues
?terra::set.values
terra::set.values(dem,
values = topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))
terra::cells(dem)
invisible(terra::set.values(dem,
cells = terra::cells(dem),
values = topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg)))
capture.output(dem <- invisible(terra::set.values(dem,
cells = terra::cells(dem),
values = topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
dem <- elevatr::get_elev_raster(locations = data.frame(x = -105, y = 40),prj = 4326, z=14)
dem = terra::rast(dem)
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
a <- terra::set.values(dem, terra::cells(dem), topidx$area)
#' Calculate upslope areas
#'
#' Thanks to https://stackoverflow.com/questions/58553966/calculating-twi-in-r
#'
#' @param dem A digital elevation model loaded in using the Raster package
#' @export
upslope <- function (dem, log = TRUE, atb = FALSE, deg = 0.12, fill.sinks = TRUE)
{ requireNamespace("topmodel")
requireNamespace("raster")
if (!all.equal(terra::xres(dem),
terra::yres(dem))) {
stop("Raster has differing x and y cell resolutions. Check that it is in a projected coordinate system (e.g. UTM) and use raster::projectRaster to reproject to one if not. Otherwise consider using raster::resample")
}
if (fill.sinks) {
capture.output(dem <- invisible(terra::set.values(dem,
cells = terra::cells(dem),
values = topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
}
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
a <- terra::set.values(dem, terra::cells(dem), topidx$area)
if (log) {
a <- log(a)
}
if (atb) {
atb <- terra::set.values(dem, terra::cells(dem), topidx$atb)
a <- terra::add.layer(a, atb)
names(a) <- c("a", "atb")
}
return(a)
}
#' Create Topographic Wetness Index and assocated layers
#'
#' Thanks to https://stackoverflow.com/questions/58553966/calculating-twi-in-r
#'
#' @param dem A digital elevation model loaded in using the Raster package
#' @export
create_layers <- function (dem, fill.sinks = TRUE, deg = 0.1)
{
requireNamespace("terra")
layers <- rast(dem)
message("Building upslope areas...")
a.atb <- upslope(dem, atb = TRUE, fill.sinks = fill.sinks, deg = deg)
layers <- terra::add.layer(layers, a.atb)
names(layers) <- c("filled.elevations", "upslope.area", "twi")
return(layers)
}
dem
create_layers(dem)
dem
upslope(dem)
dem1 <- dem
if (!all.equal(terra::xres(dem),
terra::yres(dem))) {
stop("Raster has differing x and y cell resolutions. Check that it is in a projected coordinate system (e.g. UTM) and use raster::projectRaster to reproject to one if not. Otherwise consider using raster::resample")
}
create_layers(dem, fill.sinks = F)
atb <- terra::set.values(dem, terra::cells(dem), topidx$atb)
terra::cells(dem)
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
topidx
dim(topidx)
length(topidx)
terra::as.matrix(dem)
topidx
topmodel::topidx
terra::as.matrix(dem)
load_all()
rm(list = c("create_layers", "upslope"))
load_all()
create_layers(dem)
library(raster)
create_layers(dem)
upslope(dem)
load_all()
create_layers(dem)
layers <- raster::stack(dem)
layers
a.atb <- upslope(dem, atb = TRUE, fill.sinks = fill.sinks, deg = deg)
fill.sinks=TRUE
a.atb <- upslope(dem, atb = TRUE, fill.sinks = fill.sinks, deg = deg)
upslope(dem)
dem
dem %>% as.raster()
dem <- elevatr::get_elev_raster(locations = data.frame(x = -105, y = 40),prj = 4326, z=14)
create_layers(dem)
create_layers(dem) -> x
plot(x)
create_layers(dem, fill.sinks = F) -> x
plot(x)
hist(getValues(x$twi))
hist(getValues(x$twi), breaks=30)
upslope.area <-
function(dem, log=T, atb=F, deg=0.1)
{
if(xres(dem)!=yres(dem)) {stop("x and y resolutions differ")}
# any sinks still present may give strange results
#  sink(file="e:/junk/sink.txt")
#  on.exit(sink(NULL))
capture.output(dem <- invisible(raster::setValues(dem, topmodel::sinkfill(as.matrix(dem), res=xres(dem), degree=deg))))
topidx <- topmodel::topidx(as.matrix(dem), res=xres(dem))
a <- raster::setValues(dem, topidx$area)
if(log)
{
a <- log(a)
}
if(atb)
{
atb <- raster::setValues(dem, topidx$atb)
# add the topographic index ln(a/tanB)
a <- addLayer(a, atb)
names(a)<-c("a", "atb")
}
return(a)
}
upslope.area(dem) %>% plot()
upslope.area(dem)
xres(dem)
yres(dem)
yres(dem)
upslope.area <-
function(dem, log=T, atb=F, deg=0.1)
{
capture.output(dem <- invisible(raster::setValues(dem, topmodel::sinkfill(as.matrix(dem), res=xres(dem), degree=deg))))
topidx <- topmodel::topidx(as.matrix(dem), res=xres(dem))
a <- raster::setValues(dem, topidx$area)
if(log)
{
a <- log(a)
}
if(atb)
{
atb <- raster::setValues(dem, topidx$atb)
# add the topographic index ln(a/tanB)
a <- addLayer(a, atb)
names(a)<-c("a", "atb")
}
return(a)
}
upslope.area(dem)
upslope.area(dem) -> plot()
upslope.area(dem) -> x
plot(x)
?topidx
topmodel::topidx(dem)
topmodel::topidx(dem %>% as.matrix())
topmodel::topidx(dem %>% as.matrix(), terra::res(dem))
topidx
topmodel::topidx
topmodel::topidx(dem %>% as.matrix(), terra::res(dem)) -> xx
xx$atb
xx$atb %>% terra::rast()
xx$atb %>% terra::rast() %>% plot()
xx$area %>% terra::rast() %>% plot()
xx$area %>% terra::rast() %>% log() %>% plot()
xx$area %>% terra::rast() %>% log() %>% hist()
xx$area %>% terra::rast() %>% hist()
dem <- elevatr::get_elev_raster(locations = data.frame(y=
40.63229590683869,x= -105.56689195350452), z = 14, prj=4326)
plot(dem)
dem <- elevatr::get_elev_raster(locations = data.frame(y=
40.63229590683869,x= -105.56689195350452), z = 11, prj=4326)
plot(dem)
terra::as.matrix(dem)
topidx <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
ti <- topmodel::topidx(terra::as.matrix(dem), res = terra::xres(dem))
plot(ti$atb)
plot(terra::rast(ti$atb))
ti$atb
a <- raster::setValues(dem, topidx$area)
a
plot(a)
a <- log(a)
plot(a)
atb <- raster::setValues(dem, topidx$atb)
plot(atb)
dim(ti$atb)
dim(ti$area)
plot(a)
plot(dem)
plot(a)
plot(a %>% exp())
freq(a)
topidx
topmodel::topidx
terra::terrain(dem)
terra::terrain(dem) %>% plot()
terra::terrain(dem, v = "TPI") %>% plot()
terra::terrain(dem, v = "TRI") %>% plot()
?terrain
terra::terrain(dem, v = "flowdir") %>% plot()
ter <- terra::terrain(dem, v = c("slope", "aspect", "flowdir", "TPI"))
ter
dem
ter <- terra::terrain(dem %>% rast(), v = c("slope", "aspect", "flowdir", "TPI"))
ter
plot(ter)
ter <- terra::terrain(dem %>% rast(), v = c("slope", "aspect", "roughness", "TRI"))
plot(ter)
library(devtools)
load_all()
install()
load_all()
install()
?sinkfill
?topidx
topidx
topmodel::topidx
library(devtools)
load_all()
twi_jam <- terra::rast("/Users/Adam.Mahood/Desktop/church_twi_10m.tif")
dem_jam <- terra::rast("/Users/Adam.Mahood/Desktop/USGS 10m DEM cropped v01.tif")
r <- raster::raster("/Users/Adam.Mahood/Desktop/USGS 10m DEM cropped v01.tif")
create_layers(r)
library(raster)
create_layers(r)
create_layers(r)->twi_new
twi_new$twi |> plot()
twi_jam |> plot()
twi_jam |> as("Raster") |> plot()
twi_new$twi |> plot()
sum(is.na(getValues(twi_jam)))
sum(is.na((twi_jam)))
sum(is.na(terra::values(twi_jam)))
sum(is.na(terra::values(twi_new$twi)))
dem <- dem_jam
capture.output(dem <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
deg <- 0.1
capture.output(dem <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
capture.output(dem <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
dem <- dem_jam
capture.output(dem1 <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
ti <- topmodel::topidx(terra::as.matrix(dem1), res = terra::xres(dem1))
a <- terra::setValues(dem, topidx$area)
a <- terra::setValues(dem, ti$area)
a <- log(a)
atb <- terra::setValues(dem, ti$atb)
a <- terra::addLayer(a, atb)
atb <- terra::setValues(dem, ti$atb)
plot(atb)
terra::xres(dem)
fill.sinks=T
if (fill.sinks) {
capture.output(dem1 <- invisible(terra::setValues(dem,
topmodel::sinkfill(terra::as.matrix(dem),
res = terra::xres(dem),
degree = deg))))
}else{dem1 <- dem}
ti <- topmodel::topidx(terra::as.matrix(dem1), res = terra::xres(dem1))
a <- terra::setValues(dem1, ti$area) |>
log()
atb <- terra::setValues(dem1, ti$atb)
plot(atb)
plot(twi_new$twi)
upslope(dem) |> plot()
upslope(as(dem, "Raster")) |> plot()
class(dem)
class(dem) |> as.character()
load_all()
upslope(dem) |> plot()
create_layers(dem) |> plot()
topmodel::topidx
library(devtools)
document()
check()
load_all()
document()
check()
install()
document();install()
?topidx
document();install()
library(devtools)
document()
install()
